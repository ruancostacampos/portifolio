/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 CRTMonitor.glb 
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useLoaderContext } from '../../contexts/LoaderContext'
import { useFrame, useThree } from '@react-three/fiber'

export default function Model(props) {

  const { nodes, materials } = useGLTF('/CRTMonitor.glb')
  const {setModelLoaded} = useLoaderContext()
  const ref = useRef()
  const {viewport} = useThree()
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  

  const handleMouse = (event) => {

    setMousePosition({
      x: ( -((event.x / window.innerWidth) * viewport.width) / 2.5 ) + 0.5,
      y: (((event.y / window.innerHeight) * viewport.height) / 2.5) - 0.5,
    })

  }

  useFrame(() => {
    ref.current.lookAt(mousePosition.x, mousePosition.y, -1);
  });

  useEffect(() => {
    setModelLoaded(true)
    document.addEventListener("mousemove", handleMouse)
    return () => {
      document.removeEventListener("mousemove", handleMouse)
    }
  }, [])

  return (
    <group ref={ref} {...props} dispose={null} rotation={[0,3.1,0]}>
      <mesh geometry={nodes['Node-Mesh'].geometry} material={materials.mat15} />
      <mesh geometry={nodes['Node-Mesh_1'].geometry} material={materials.mat17} />
      <mesh geometry={nodes['Node-Mesh_2'].geometry} material={materials.mat16} />
      <mesh geometry={nodes['Node-Mesh_3'].geometry} material={materials.mat22} />
    </group>
  )
}

useGLTF.preload('/CRTMonitor.glb')
